// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc.proto

package orderproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InnoTaxiClient is the client API for InnoTaxi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InnoTaxiClient interface {
	RateOrderByUser(ctx context.Context, in *OrderRate, opts ...grpc.CallOption) (*OrderUserSide, error)
	GetAllUserOrders(ctx context.Context, in *Email, opts ...grpc.CallOption) (*UserOrders, error)
	OrderTaxi(ctx context.Context, in *RequestTaxi, opts ...grpc.CallOption) (*TaxiResponse, error)
	RateOrderByDriver(ctx context.Context, in *OrderRate, opts ...grpc.CallOption) (*OrderDriverSide, error)
	GetAllDriverOrders(ctx context.Context, in *Email, opts ...grpc.CallOption) (*DriverOrders, error)
	EndOrder(ctx context.Context, in *Email, opts ...grpc.CallOption) (*OrderDriverSide, error)
}

type innoTaxiClient struct {
	cc grpc.ClientConnInterface
}

func NewInnoTaxiClient(cc grpc.ClientConnInterface) InnoTaxiClient {
	return &innoTaxiClient{cc}
}

func (c *innoTaxiClient) RateOrderByUser(ctx context.Context, in *OrderRate, opts ...grpc.CallOption) (*OrderUserSide, error) {
	out := new(OrderUserSide)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/RateOrderByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innoTaxiClient) GetAllUserOrders(ctx context.Context, in *Email, opts ...grpc.CallOption) (*UserOrders, error) {
	out := new(UserOrders)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/GetAllUserOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innoTaxiClient) OrderTaxi(ctx context.Context, in *RequestTaxi, opts ...grpc.CallOption) (*TaxiResponse, error) {
	out := new(TaxiResponse)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/OrderTaxi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innoTaxiClient) RateOrderByDriver(ctx context.Context, in *OrderRate, opts ...grpc.CallOption) (*OrderDriverSide, error) {
	out := new(OrderDriverSide)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/RateOrderByDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innoTaxiClient) GetAllDriverOrders(ctx context.Context, in *Email, opts ...grpc.CallOption) (*DriverOrders, error) {
	out := new(DriverOrders)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/GetAllDriverOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innoTaxiClient) EndOrder(ctx context.Context, in *Email, opts ...grpc.CallOption) (*OrderDriverSide, error) {
	out := new(OrderDriverSide)
	err := c.cc.Invoke(ctx, "/grpcTaxi.InnoTaxi/EndOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnoTaxiServer is the server API for InnoTaxi service.
// All implementations must embed UnimplementedInnoTaxiServer
// for forward compatibility
type InnoTaxiServer interface {
	RateOrderByUser(context.Context, *OrderRate) (*OrderUserSide, error)
	GetAllUserOrders(context.Context, *Email) (*UserOrders, error)
	OrderTaxi(context.Context, *RequestTaxi) (*TaxiResponse, error)
	RateOrderByDriver(context.Context, *OrderRate) (*OrderDriverSide, error)
	GetAllDriverOrders(context.Context, *Email) (*DriverOrders, error)
	EndOrder(context.Context, *Email) (*OrderDriverSide, error)
	mustEmbedUnimplementedInnoTaxiServer()
}

// UnimplementedInnoTaxiServer must be embedded to have forward compatible implementations.
type UnimplementedInnoTaxiServer struct {
}

func (UnimplementedInnoTaxiServer) RateOrderByUser(context.Context, *OrderRate) (*OrderUserSide, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateOrderByUser not implemented")
}
func (UnimplementedInnoTaxiServer) GetAllUserOrders(context.Context, *Email) (*UserOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserOrders not implemented")
}
func (UnimplementedInnoTaxiServer) OrderTaxi(context.Context, *RequestTaxi) (*TaxiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderTaxi not implemented")
}
func (UnimplementedInnoTaxiServer) RateOrderByDriver(context.Context, *OrderRate) (*OrderDriverSide, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateOrderByDriver not implemented")
}
func (UnimplementedInnoTaxiServer) GetAllDriverOrders(context.Context, *Email) (*DriverOrders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDriverOrders not implemented")
}
func (UnimplementedInnoTaxiServer) EndOrder(context.Context, *Email) (*OrderDriverSide, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndOrder not implemented")
}
func (UnimplementedInnoTaxiServer) mustEmbedUnimplementedInnoTaxiServer() {}

// UnsafeInnoTaxiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InnoTaxiServer will
// result in compilation errors.
type UnsafeInnoTaxiServer interface {
	mustEmbedUnimplementedInnoTaxiServer()
}

func RegisterInnoTaxiServer(s grpc.ServiceRegistrar, srv InnoTaxiServer) {
	s.RegisterService(&InnoTaxi_ServiceDesc, srv)
}

func _InnoTaxi_RateOrderByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).RateOrderByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/RateOrderByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).RateOrderByUser(ctx, req.(*OrderRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnoTaxi_GetAllUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).GetAllUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/GetAllUserOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).GetAllUserOrders(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnoTaxi_OrderTaxi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTaxi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).OrderTaxi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/OrderTaxi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).OrderTaxi(ctx, req.(*RequestTaxi))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnoTaxi_RateOrderByDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).RateOrderByDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/RateOrderByDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).RateOrderByDriver(ctx, req.(*OrderRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnoTaxi_GetAllDriverOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).GetAllDriverOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/GetAllDriverOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).GetAllDriverOrders(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnoTaxi_EndOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiServer).EndOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxi.InnoTaxi/EndOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiServer).EndOrder(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

// InnoTaxi_ServiceDesc is the grpc.ServiceDesc for InnoTaxi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InnoTaxi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcTaxi.InnoTaxi",
	HandlerType: (*InnoTaxiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RateOrderByUser",
			Handler:    _InnoTaxi_RateOrderByUser_Handler,
		},
		{
			MethodName: "GetAllUserOrders",
			Handler:    _InnoTaxi_GetAllUserOrders_Handler,
		},
		{
			MethodName: "OrderTaxi",
			Handler:    _InnoTaxi_OrderTaxi_Handler,
		},
		{
			MethodName: "RateOrderByDriver",
			Handler:    _InnoTaxi_RateOrderByDriver_Handler,
		},
		{
			MethodName: "GetAllDriverOrders",
			Handler:    _InnoTaxi_GetAllDriverOrders_Handler,
		},
		{
			MethodName: "EndOrder",
			Handler:    _InnoTaxi_EndOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
