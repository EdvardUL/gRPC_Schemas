// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: driver/grpc.proto

package grpcTaxiDriver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InnoTaxiDriverClient is the client API for InnoTaxiDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InnoTaxiDriverClient interface {
	GetFreeDriver(ctx context.Context, in *RequestTaxi, opts ...grpc.CallOption) (*Driver, error)
}

type innoTaxiDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewInnoTaxiDriverClient(cc grpc.ClientConnInterface) InnoTaxiDriverClient {
	return &innoTaxiDriverClient{cc}
}

func (c *innoTaxiDriverClient) GetFreeDriver(ctx context.Context, in *RequestTaxi, opts ...grpc.CallOption) (*Driver, error) {
	out := new(Driver)
	err := c.cc.Invoke(ctx, "/grpcTaxiDriverSchema.InnoTaxiDriver/GetFreeDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnoTaxiDriverServer is the server API for InnoTaxiDriver service.
// All implementations must embed UnimplementedInnoTaxiDriverServer
// for forward compatibility
type InnoTaxiDriverServer interface {
	GetFreeDriver(context.Context, *RequestTaxi) (*Driver, error)
	mustEmbedUnimplementedInnoTaxiDriverServer()
}

// UnimplementedInnoTaxiDriverServer must be embedded to have forward compatible implementations.
type UnimplementedInnoTaxiDriverServer struct {
}

func (UnimplementedInnoTaxiDriverServer) GetFreeDriver(context.Context, *RequestTaxi) (*Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeDriver not implemented")
}
func (UnimplementedInnoTaxiDriverServer) mustEmbedUnimplementedInnoTaxiDriverServer() {}

// UnsafeInnoTaxiDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InnoTaxiDriverServer will
// result in compilation errors.
type UnsafeInnoTaxiDriverServer interface {
	mustEmbedUnimplementedInnoTaxiDriverServer()
}

func RegisterInnoTaxiDriverServer(s grpc.ServiceRegistrar, srv InnoTaxiDriverServer) {
	s.RegisterService(&InnoTaxiDriver_ServiceDesc, srv)
}

func _InnoTaxiDriver_GetFreeDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTaxi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnoTaxiDriverServer).GetFreeDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcTaxiDriverSchema.InnoTaxiDriver/GetFreeDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnoTaxiDriverServer).GetFreeDriver(ctx, req.(*RequestTaxi))
	}
	return interceptor(ctx, in, info, handler)
}

// InnoTaxiDriver_ServiceDesc is the grpc.ServiceDesc for InnoTaxiDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InnoTaxiDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcTaxiDriverSchema.InnoTaxiDriver",
	HandlerType: (*InnoTaxiDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFreeDriver",
			Handler:    _InnoTaxiDriver_GetFreeDriver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver/grpc.proto",
}
